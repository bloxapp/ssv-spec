// Code generated by fastssz. DO NOT EDIT.
// Hash: e40484b5f771ab26e39f1bee0dad33c1c7c6dbfc4f0665ee6d370b5f83687e2c
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Operator object
func (o *Operator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(o)
}

// MarshalSSZTo ssz marshals the Operator object to a target array
func (o *Operator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'OperatorID'
	dst = ssz.MarshalUint64(dst, uint64(o.OperatorID))

	// Field (1) 'SharePubKey'
	if size := len(o.SharePubKey); size != 48 {
		err = ssz.ErrBytesLengthFn("Operator.SharePubKey", size, 48)
		return
	}
	dst = append(dst, o.SharePubKey...)

	// Field (2) 'SSVOperatorPubKey'
	if size := len(o.SSVOperatorPubKey); size != 294 {
		err = ssz.ErrBytesLengthFn("Operator.SSVOperatorPubKey", size, 294)
		return
	}
	dst = append(dst, o.SSVOperatorPubKey...)

	return
}

// UnmarshalSSZ ssz unmarshals the Operator object
func (o *Operator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 350 {
		return ssz.ErrSize
	}

	// Field (0) 'OperatorID'
	o.OperatorID = OperatorID(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'SharePubKey'
	if cap(o.SharePubKey) == 0 {
		o.SharePubKey = make([]byte, 0, len(buf[8:56]))
	}
	o.SharePubKey = append(o.SharePubKey, buf[8:56]...)

	// Field (2) 'SSVOperatorPubKey'
	if cap(o.SSVOperatorPubKey) == 0 {
		o.SSVOperatorPubKey = make([]byte, 0, len(buf[56:350]))
	}
	o.SSVOperatorPubKey = append(o.SSVOperatorPubKey, buf[56:350]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Operator object
func (o *Operator) SizeSSZ() (size int) {
	size = 350
	return
}

// HashTreeRoot ssz hashes the Operator object
func (o *Operator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(o)
}

// HashTreeRootWith ssz hashes the Operator object with a hasher
func (o *Operator) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'OperatorID'
	hh.PutUint64(uint64(o.OperatorID))

	// Field (1) 'SharePubKey'
	if size := len(o.SharePubKey); size != 48 {
		err = ssz.ErrBytesLengthFn("Operator.SharePubKey", size, 48)
		return
	}
	hh.PutBytes(o.SharePubKey)

	// Field (2) 'SSVOperatorPubKey'
	if size := len(o.SSVOperatorPubKey); size != 294 {
		err = ssz.ErrBytesLengthFn("Operator.SSVOperatorPubKey", size, 294)
		return
	}
	hh.PutBytes(o.SSVOperatorPubKey)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Operator object
func (o *Operator) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(o)
}
