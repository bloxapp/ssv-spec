// Code generated by fastssz. DO NOT EDIT.
// Hash: 63cd311cf464c664532840cc0361eabb9ff22091acc7a518edde3b792ba1632b
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the CommitteeMember object
func (o *CommitteeMember) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(o)
}

// MarshalSSZTo ssz marshals the CommitteeMember object to a target array
func (o *CommitteeMember) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(338)

	// Field (0) 'OperatorID'
	dst = ssz.MarshalUint64(dst, uint64(o.OperatorID))

	// Field (1) 'CommitteeID'
	dst = append(dst, o.CommitteeID[:]...)

	// Field (2) 'SSVOperatorPubKey'
	if size := len(o.SSVOperatorPubKey); size != 294 {
		err = ssz.ErrBytesLengthFn("CommitteeMember.SSVOperatorPubKey", size, 294)
		return
	}
	dst = append(dst, o.SSVOperatorPubKey...)

	// Offset (3) 'Committee'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(o.Committee) * 302

	// Field (3) 'Committee'
	if size := len(o.Committee); size > 13 {
		err = ssz.ErrListTooBigFn("CommitteeMember.Committee", size, 13)
		return
	}
	for ii := 0; ii < len(o.Committee); ii++ {
		if dst, err = o.Committee[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the CommitteeMember object
func (o *CommitteeMember) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 338 {
		return ssz.ErrSize
	}

	tail := buf
	var o3 uint64

	// Field (0) 'OperatorID'
	o.OperatorID = OperatorID(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'CommitteeID'
	copy(o.CommitteeID[:], buf[8:40])

	// Field (2) 'SSVOperatorPubKey'
	if cap(o.SSVOperatorPubKey) == 0 {
		o.SSVOperatorPubKey = make([]byte, 0, len(buf[40:334]))
	}
	o.SSVOperatorPubKey = append(o.SSVOperatorPubKey, buf[40:334]...)

	// Offset (3) 'Committee'
	if o3 = ssz.ReadOffset(buf[334:338]); o3 > size {
		return ssz.ErrOffset
	}

	if o3 < 338 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (3) 'Committee'
	{
		buf = tail[o3:]
		num, err := ssz.DivideInt2(len(buf), 302, 13)
		if err != nil {
			return err
		}
		o.Committee = make([]*Operator, num)
		for ii := 0; ii < num; ii++ {
			if o.Committee[ii] == nil {
				o.Committee[ii] = new(Operator)
			}
			if err = o.Committee[ii].UnmarshalSSZ(buf[ii*302 : (ii+1)*302]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CommitteeMember object
func (o *CommitteeMember) SizeSSZ() (size int) {
	size = 338

	// Field (3) 'Committee'
	size += len(o.Committee) * 302

	return
}

// HashTreeRoot ssz hashes the CommitteeMember object
func (o *CommitteeMember) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(o)
}

// HashTreeRootWith ssz hashes the CommitteeMember object with a hasher
func (o *CommitteeMember) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'OperatorID'
	hh.PutUint64(uint64(o.OperatorID))

	// Field (1) 'CommitteeID'
	hh.PutBytes(o.CommitteeID[:])

	// Field (2) 'SSVOperatorPubKey'
	if size := len(o.SSVOperatorPubKey); size != 294 {
		err = ssz.ErrBytesLengthFn("CommitteeMember.SSVOperatorPubKey", size, 294)
		return
	}
	hh.PutBytes(o.SSVOperatorPubKey)

	// Field (3) 'Committee'
	{
		subIndx := hh.Index()
		num := uint64(len(o.Committee))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range o.Committee {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the CommitteeMember object
func (o *CommitteeMember) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(o)
}

// MarshalSSZ ssz marshals the Operator object
func (c *Operator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Operator object to a target array
func (c *Operator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'OperatorID'
	dst = ssz.MarshalUint64(dst, uint64(c.OperatorID))

	// Field (1) 'SSVOperatorPubKey'
	if size := len(c.SSVOperatorPubKey); size != 294 {
		err = ssz.ErrBytesLengthFn("Operator.SSVOperatorPubKey", size, 294)
		return
	}
	dst = append(dst, c.SSVOperatorPubKey...)

	return
}

// UnmarshalSSZ ssz unmarshals the Operator object
func (c *Operator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 302 {
		return ssz.ErrSize
	}

	// Field (0) 'OperatorID'
	c.OperatorID = OperatorID(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'SSVOperatorPubKey'
	if cap(c.SSVOperatorPubKey) == 0 {
		c.SSVOperatorPubKey = make([]byte, 0, len(buf[8:302]))
	}
	c.SSVOperatorPubKey = append(c.SSVOperatorPubKey, buf[8:302]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Operator object
func (c *Operator) SizeSSZ() (size int) {
	size = 302
	return
}

// HashTreeRoot ssz hashes the Operator object
func (c *Operator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Operator object with a hasher
func (c *Operator) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'OperatorID'
	hh.PutUint64(uint64(c.OperatorID))

	// Field (1) 'SSVOperatorPubKey'
	if size := len(c.SSVOperatorPubKey); size != 294 {
		err = ssz.ErrBytesLengthFn("Operator.SSVOperatorPubKey", size, 294)
		return
	}
	hh.PutBytes(c.SSVOperatorPubKey)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Operator object
func (c *Operator) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
